type Result_3 = 
 variant {
   err: text;
   ok: vec ConfigurationValueForEnv;
 };
type Result_2 = 
 variant {
   err: text;
   ok: Application;
 };
type Result_1 = 
 variant {
   err: text;
   ok: vec Application;
 };
type Result = 
 variant {
   err: text;
   ok: text;
 };
type List_1 = 
 opt record {
       Environment;
       List_1;
     };
type List = 
 opt record {
       Configuration;
       List;
     };
type EnvironmentList = 
 opt record {
       Environment;
       List_1;
     };
type Environment = 
 record {
   id: text;
   name: text;
 };
type ConfigurationValueForEnv = 
 record {
   environmentId: text;
   isPrivate: bool;
   key: text;
   value: text;
   valueType: ConfigurationTypes;
 };
type ConfigurationTypes = 
 variant {
   boolean;
   number;
   string;
 };
type ConfigurationList = 
 opt record {
       Configuration;
       List;
     };
type Configuration = 
 record {
   defaultValue: text;
   isPrivate: bool;
   key: text;
   valueType: ConfigurationTypes;
 };
type Application = 
 record {
   configurations: ConfigurationList;
   environments: EnvironmentList;
   id: text;
   name: text;
   owner: principal;
 };
service : {
  createApplication: (text, text) -> (Result);
  createConfiguration: (text, text, ConfigurationTypes, text, bool) ->
   (Result);
  createEnvironment: (text, text, text) -> (Result);
  getAllConfigValues: (text, text) -> (Result_3);
  getApplication: (text) -> (Result_2);
  getConfigValue: (text, text, text) -> (Result);
  getOwnedApplications: () -> (Result_1);
  removeApplication: (text) -> (Result);
  removeConfiguration: (text, text) -> (Result);
  removeEnvironment: (text, text) -> (Result);
  setConfigValue: (text, text, text, text) -> (Result);
}
